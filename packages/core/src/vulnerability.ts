import { Seat } from "./seat";

const vulnerabilities = ["None", "North / South", "East / West", "All"];

export class Vulnerability {
  public static None = new Vulnerability("None");
  public static NorthSouth = new Vulnerability("North / South");
  public static EastWest = new Vulnerability("East / West");
  public static All = new Vulnerability("All");

  constructor(public value: string) {
    if (!vulnerabilities.includes(value)) {
      throw new Error("Invalid value passed to Vulnerability: " + value);
    }
  }

  toString() {
    return this.value;
  }

  index(): number {
    return vulnerabilities.indexOf(this.value);
  }

  next(): Vulnerability {
    return new Vulnerability(vulnerabilities[(this.index() + 1) % 4]);
  }

  isVulnerable(seat: Seat): boolean {
    if (this.equals(Vulnerability.All)) {
      return true;
    }
    if (this.equals(Vulnerability.None)) {
      return false;
    }
    if (seat === Seat.North || seat === Seat.South) {
      return this.equals(Vulnerability.NorthSouth);
    } else {
      return this.equals(Vulnerability.EastWest);
    }
  }

  equals(v: Vulnerability) {
    return this.value === v.value;
  }
}

export const AllVulnerabilities = vulnerabilities.map(
  (v) => new Vulnerability(v)
);
